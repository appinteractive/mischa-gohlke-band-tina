# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  navMain(relativePath: String): NavMain!
  navMainConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NavMainFilter): NavMainConnection!
  navFooter(relativePath: String): NavFooter!
  navFooterConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NavFooterFilter): NavFooterConnection!
}

input DocumentFilter {
  page: PageFilter
  navMain: NavMainFilter
  navFooter: NavFooterFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = PageSimple | PageBlocks | NavMainMainNav | NavFooterFooter

type PageSimple implements Node & Document {
  title: String!
  description: String
  teaser: String
  alias: String
  accessible: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageBlocksBlocksHero {
  headline: String
  text: JSON
}

type PageBlocksBlocksFeaturesItems {
  title: String
  text: String
}

type PageBlocksBlocksFeatures {
  items: [PageBlocksBlocksFeaturesItems]
}

type PageBlocksBlocksContent {
  body: JSON
}

union PageBlocksBlocks = PageBlocksBlocksHero | PageBlocksBlocksFeatures | PageBlocksBlocksContent

type PageBlocks implements Node & Document {
  title: String!
  description: String
  teaser: String
  alias: String
  accessible: String
  blocks: [PageBlocksBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Page = PageSimple | PageBlocks

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageSimpleBodyVideoPlayerVideosFilter {
  url: StringFilter
  title: StringFilter
  poster: StringFilter
  duration: StringFilter
}

input PageSimpleBodyVideoPlayerFilter {
  videos: PageSimpleBodyVideoPlayerVideosFilter
}

input PageSimpleBodyFilter {
  VideoPlayer: PageSimpleBodyVideoPlayerFilter
}

input PageSimpleFilter {
  title: StringFilter
  description: StringFilter
  teaser: ImageFilter
  alias: StringFilter
  accessible: StringFilter
  body: PageSimpleBodyFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageBlocksBlocksHeroFilter {
  headline: StringFilter
  text: RichTextFilter
}

input PageBlocksBlocksFeaturesItemsFilter {
  title: StringFilter
  text: StringFilter
}

input PageBlocksBlocksFeaturesFilter {
  items: PageBlocksBlocksFeaturesItemsFilter
}

input PageBlocksBlocksContentFilter {
  body: RichTextFilter
}

input PageBlocksBlocksFilter {
  hero: PageBlocksBlocksHeroFilter
  features: PageBlocksBlocksFeaturesFilter
  content: PageBlocksBlocksContentFilter
}

input PageBlocksFilter {
  title: StringFilter
  description: StringFilter
  teaser: ImageFilter
  alias: StringFilter
  accessible: StringFilter
  blocks: PageBlocksBlocksFilter
}

input PageFilter {
  simple: PageSimpleFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

union NavMainMainNavMenuPage = PageSimple | PageBlocks

union NavMainMainNavMenuChildrenPage = PageSimple | PageBlocks

union NavMainMainNavMenuChildrenChildrenPage = PageSimple | PageBlocks

union NavMainMainNavMenuChildrenChildrenChildrenPage = PageSimple | PageBlocks

union NavMainMainNavMenuChildrenChildrenChildrenChildrenPage = PageSimple | PageBlocks

type NavMainMainNavMenuChildrenChildrenChildrenChildren {
  title: String!
  page: NavMainMainNavMenuChildrenChildrenChildrenChildrenPage
}

type NavMainMainNavMenuChildrenChildrenChildren {
  title: String!
  page: NavMainMainNavMenuChildrenChildrenChildrenPage
  children: [NavMainMainNavMenuChildrenChildrenChildrenChildren]
}

type NavMainMainNavMenuChildrenChildren {
  title: String!
  page: NavMainMainNavMenuChildrenChildrenPage
  description: String
  disabled: Boolean
  showInMainNavigation: Boolean
  children: [NavMainMainNavMenuChildrenChildrenChildren]
}

type NavMainMainNavMenuChildren {
  title: String!
  page: NavMainMainNavMenuChildrenPage
  disabled: Boolean
  showInMainNavigation: Boolean
  children: [NavMainMainNavMenuChildrenChildren]
}

type NavMainMainNavMenu {
  title: String!
  page: NavMainMainNavMenuPage
  disabled: Boolean
  showInMainNavigation: Boolean
  children: [NavMainMainNavMenuChildren]
}

type NavMainMainNav implements Node & Document {
  menu: [NavMainMainNavMenu]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union NavMain = NavMainMainNav

input NavMainMainNavMenuPageFilter {
  page: PageFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input NavMainMainNavMenuChildrenPageFilter {
  page: PageFilter
}

input NavMainMainNavMenuChildrenChildrenPageFilter {
  page: PageFilter
}

input NavMainMainNavMenuChildrenChildrenChildrenPageFilter {
  page: PageFilter
}

input NavMainMainNavMenuChildrenChildrenChildrenChildrenPageFilter {
  page: PageFilter
}

input NavMainMainNavMenuChildrenChildrenChildrenChildrenFilter {
  title: StringFilter
  page: NavMainMainNavMenuChildrenChildrenChildrenChildrenPageFilter
}

input NavMainMainNavMenuChildrenChildrenChildrenFilter {
  title: StringFilter
  page: NavMainMainNavMenuChildrenChildrenChildrenPageFilter
  children: NavMainMainNavMenuChildrenChildrenChildrenChildrenFilter
}

input NavMainMainNavMenuChildrenChildrenFilter {
  title: StringFilter
  page: NavMainMainNavMenuChildrenChildrenPageFilter
  description: StringFilter
  disabled: BooleanFilter
  showInMainNavigation: BooleanFilter
  children: NavMainMainNavMenuChildrenChildrenChildrenFilter
}

input NavMainMainNavMenuChildrenFilter {
  title: StringFilter
  page: NavMainMainNavMenuChildrenPageFilter
  disabled: BooleanFilter
  showInMainNavigation: BooleanFilter
  children: NavMainMainNavMenuChildrenChildrenFilter
}

input NavMainMainNavMenuFilter {
  title: StringFilter
  page: NavMainMainNavMenuPageFilter
  disabled: BooleanFilter
  showInMainNavigation: BooleanFilter
  children: NavMainMainNavMenuChildrenFilter
}

input NavMainMainNavFilter {
  menu: NavMainMainNavMenuFilter
}

input NavMainFilter {
  mainNav: NavMainMainNavFilter
}

type NavMainConnectionEdges {
  cursor: String!
  node: NavMain
}

type NavMainConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NavMainConnectionEdges]
}

union NavFooterFooterFooterMenuChildrenPage = PageSimple | PageBlocks

type NavFooterFooterFooterMenuChildren {
  title: String!
  page: NavFooterFooterFooterMenuChildrenPage!
}

type NavFooterFooterFooterMenu {
  title: String!
  children: [NavFooterFooterFooterMenuChildren]
}

type NavFooterFooter implements Node & Document {
  footerMenu: [NavFooterFooterFooterMenu]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union NavFooter = NavFooterFooter

input NavFooterFooterFooterMenuChildrenPageFilter {
  page: PageFilter
}

input NavFooterFooterFooterMenuChildrenFilter {
  title: StringFilter
  page: NavFooterFooterFooterMenuChildrenPageFilter
}

input NavFooterFooterFooterMenuFilter {
  title: StringFilter
  children: NavFooterFooterFooterMenuChildrenFilter
}

input NavFooterFooterFilter {
  footerMenu: NavFooterFooterFooterMenuFilter
}

input NavFooterFilter {
  footer: NavFooterFooterFilter
}

type NavFooterConnectionEdges {
  cursor: String!
  node: NavFooter
}

type NavFooterConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NavFooterConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateNavMain(relativePath: String!, params: NavMainMutation!): NavMain!
  createNavMain(relativePath: String!, params: NavMainMutation!): NavMain!
  updateNavFooter(relativePath: String!, params: NavFooterMutation!): NavFooter!
  createNavFooter(relativePath: String!, params: NavFooterMutation!): NavFooter!
}

input DocumentUpdateMutation {
  page: PageMutation
  navMain: NavMainMutation
  navFooter: NavFooterMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  navMain: NavMainMutation
  navFooter: NavFooterMutation
}

input PageSimpleMutation {
  title: String
  description: String
  teaser: String
  alias: String
  accessible: String
  body: JSON
}

input PageBlocksBlocksHeroMutation {
  headline: String
  text: JSON
}

input PageBlocksBlocksFeaturesItemsMutation {
  title: String
  text: String
}

input PageBlocksBlocksFeaturesMutation {
  items: [PageBlocksBlocksFeaturesItemsMutation]
}

input PageBlocksBlocksContentMutation {
  body: JSON
}

input PageBlocksBlocksMutation {
  hero: PageBlocksBlocksHeroMutation
  features: PageBlocksBlocksFeaturesMutation
  content: PageBlocksBlocksContentMutation
}

input PageBlocksMutation {
  title: String
  description: String
  teaser: String
  alias: String
  accessible: String
  blocks: [PageBlocksBlocksMutation]
}

input PageMutation {
  simple: PageSimpleMutation
  blocks: PageBlocksMutation
}

input NavMainMainNavMenuChildrenChildrenChildrenChildrenMutation {
  title: String
  page: String
}

input NavMainMainNavMenuChildrenChildrenChildrenMutation {
  title: String
  page: String
  children: [NavMainMainNavMenuChildrenChildrenChildrenChildrenMutation]
}

input NavMainMainNavMenuChildrenChildrenMutation {
  title: String
  page: String
  description: String
  disabled: Boolean
  showInMainNavigation: Boolean
  children: [NavMainMainNavMenuChildrenChildrenChildrenMutation]
}

input NavMainMainNavMenuChildrenMutation {
  title: String
  page: String
  disabled: Boolean
  showInMainNavigation: Boolean
  children: [NavMainMainNavMenuChildrenChildrenMutation]
}

input NavMainMainNavMenuMutation {
  title: String
  page: String
  disabled: Boolean
  showInMainNavigation: Boolean
  children: [NavMainMainNavMenuChildrenMutation]
}

input NavMainMainNavMutation {
  menu: [NavMainMainNavMenuMutation]
}

input NavMainMutation {
  mainNav: NavMainMainNavMutation
}

input NavFooterFooterFooterMenuChildrenMutation {
  title: String
  page: String
}

input NavFooterFooterFooterMenuMutation {
  title: String
  children: [NavFooterFooterFooterMenuChildrenMutation]
}

input NavFooterFooterMutation {
  footerMenu: [NavFooterFooterFooterMenuMutation]
}

input NavFooterMutation {
  footer: NavFooterFooterMutation
}

schema {
  query: Query
  mutation: Mutation
}
