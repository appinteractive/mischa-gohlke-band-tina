# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  navigation(relativePath: String): Navigation!
  navigationConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NavigationFilter): NavigationConnection!
}

input DocumentFilter {
  page: PageFilter
  navigation: NavigationFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = PageSimple | PageBlocks | NavigationFooter | NavigationMainNav

type PageSimple implements Node & Document {
  title: String!
  description: String
  teaser: String
  alias: String
  accessible: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PageBlocksBlocksHero {
  headline: String
  text: JSON
}

type PageBlocksBlocksFeaturesItems {
  title: String
  text: String
}

type PageBlocksBlocksFeatures {
  items: [PageBlocksBlocksFeaturesItems]
}

type PageBlocksBlocksContent {
  body: JSON
}

union PageBlocksBlocks = PageBlocksBlocksHero | PageBlocksBlocksFeatures | PageBlocksBlocksContent

type PageBlocks implements Node & Document {
  title: String!
  description: String
  teaser: String
  alias: String
  accessible: String
  blocks: [PageBlocksBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Page = PageSimple | PageBlocks

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageSimpleFilter {
  title: StringFilter
  description: StringFilter
  teaser: ImageFilter
  alias: StringFilter
  accessible: StringFilter
  body: RichTextFilter
}

input PageBlocksBlocksHeroFilter {
  headline: StringFilter
  text: RichTextFilter
}

input PageBlocksBlocksFeaturesItemsFilter {
  title: StringFilter
  text: StringFilter
}

input PageBlocksBlocksFeaturesFilter {
  items: PageBlocksBlocksFeaturesItemsFilter
}

input PageBlocksBlocksContentFilter {
  body: RichTextFilter
}

input PageBlocksBlocksFilter {
  hero: PageBlocksBlocksHeroFilter
  features: PageBlocksBlocksFeaturesFilter
  content: PageBlocksBlocksContentFilter
}

input PageBlocksFilter {
  title: StringFilter
  description: StringFilter
  teaser: ImageFilter
  alias: StringFilter
  accessible: StringFilter
  blocks: PageBlocksBlocksFilter
}

input PageFilter {
  simple: PageSimpleFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

union NavigationFooterFooterMenuChildrenPage = PageSimple | PageBlocks

type NavigationFooterFooterMenuChildren {
  title: String!
  page: NavigationFooterFooterMenuChildrenPage!
}

type NavigationFooterFooterMenu {
  title: String!
  children: [NavigationFooterFooterMenuChildren]
}

type NavigationFooter implements Node & Document {
  footerMenu: [NavigationFooterFooterMenu]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union NavigationMainNavMenuPage = PageSimple | PageBlocks

union NavigationMainNavMenuChildrenPage = PageSimple | PageBlocks

union NavigationMainNavMenuChildrenChildrenPage = PageSimple | PageBlocks

union NavigationMainNavMenuChildrenChildrenChildrenPage = PageSimple | PageBlocks

union NavigationMainNavMenuChildrenChildrenChildrenChildrenPage = PageSimple | PageBlocks

type NavigationMainNavMenuChildrenChildrenChildrenChildren {
  title: String!
  page: NavigationMainNavMenuChildrenChildrenChildrenChildrenPage
}

type NavigationMainNavMenuChildrenChildrenChildren {
  title: String!
  page: NavigationMainNavMenuChildrenChildrenChildrenPage
  children: [NavigationMainNavMenuChildrenChildrenChildrenChildren]
}

type NavigationMainNavMenuChildrenChildren {
  title: String!
  page: NavigationMainNavMenuChildrenChildrenPage
  description: String
  disabled: Boolean
  showInMainNavigation: Boolean
  children: [NavigationMainNavMenuChildrenChildrenChildren]
}

type NavigationMainNavMenuChildren {
  title: String!
  page: NavigationMainNavMenuChildrenPage
  disabled: Boolean
  showInMainNavigation: Boolean
  children: [NavigationMainNavMenuChildrenChildren]
}

type NavigationMainNavMenu {
  title: String!
  page: NavigationMainNavMenuPage
  disabled: Boolean
  showInMainNavigation: Boolean
  children: [NavigationMainNavMenuChildren]
}

type NavigationMainNav implements Node & Document {
  menu: [NavigationMainNavMenu]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

union Navigation = NavigationFooter | NavigationMainNav

input NavigationFooterFooterMenuChildrenPageFilter {
  page: PageFilter
}

input NavigationFooterFooterMenuChildrenFilter {
  title: StringFilter
  page: NavigationFooterFooterMenuChildrenPageFilter
}

input NavigationFooterFooterMenuFilter {
  title: StringFilter
  children: NavigationFooterFooterMenuChildrenFilter
}

input NavigationFooterFilter {
  footerMenu: NavigationFooterFooterMenuFilter
}

input NavigationMainNavMenuPageFilter {
  page: PageFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input NavigationMainNavMenuChildrenPageFilter {
  page: PageFilter
}

input NavigationMainNavMenuChildrenChildrenPageFilter {
  page: PageFilter
}

input NavigationMainNavMenuChildrenChildrenChildrenPageFilter {
  page: PageFilter
}

input NavigationMainNavMenuChildrenChildrenChildrenChildrenPageFilter {
  page: PageFilter
}

input NavigationMainNavMenuChildrenChildrenChildrenChildrenFilter {
  title: StringFilter
  page: NavigationMainNavMenuChildrenChildrenChildrenChildrenPageFilter
}

input NavigationMainNavMenuChildrenChildrenChildrenFilter {
  title: StringFilter
  page: NavigationMainNavMenuChildrenChildrenChildrenPageFilter
  children: NavigationMainNavMenuChildrenChildrenChildrenChildrenFilter
}

input NavigationMainNavMenuChildrenChildrenFilter {
  title: StringFilter
  page: NavigationMainNavMenuChildrenChildrenPageFilter
  description: StringFilter
  disabled: BooleanFilter
  showInMainNavigation: BooleanFilter
  children: NavigationMainNavMenuChildrenChildrenChildrenFilter
}

input NavigationMainNavMenuChildrenFilter {
  title: StringFilter
  page: NavigationMainNavMenuChildrenPageFilter
  disabled: BooleanFilter
  showInMainNavigation: BooleanFilter
  children: NavigationMainNavMenuChildrenChildrenFilter
}

input NavigationMainNavMenuFilter {
  title: StringFilter
  page: NavigationMainNavMenuPageFilter
  disabled: BooleanFilter
  showInMainNavigation: BooleanFilter
  children: NavigationMainNavMenuChildrenFilter
}

input NavigationMainNavFilter {
  menu: NavigationMainNavMenuFilter
}

input NavigationFilter {
  footer: NavigationFooterFilter
  mainNav: NavigationMainNavFilter
}

type NavigationConnectionEdges {
  cursor: String!
  node: Navigation
}

type NavigationConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NavigationConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateNavigation(relativePath: String!, params: NavigationMutation!): Navigation!
  createNavigation(relativePath: String!, params: NavigationMutation!): Navigation!
}

input DocumentUpdateMutation {
  page: PageMutation
  navigation: NavigationMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  navigation: NavigationMutation
}

input PageSimpleMutation {
  title: String
  description: String
  teaser: String
  alias: String
  accessible: String
  body: JSON
}

input PageBlocksBlocksHeroMutation {
  headline: String
  text: JSON
}

input PageBlocksBlocksFeaturesItemsMutation {
  title: String
  text: String
}

input PageBlocksBlocksFeaturesMutation {
  items: [PageBlocksBlocksFeaturesItemsMutation]
}

input PageBlocksBlocksContentMutation {
  body: JSON
}

input PageBlocksBlocksMutation {
  hero: PageBlocksBlocksHeroMutation
  features: PageBlocksBlocksFeaturesMutation
  content: PageBlocksBlocksContentMutation
}

input PageBlocksMutation {
  title: String
  description: String
  teaser: String
  alias: String
  accessible: String
  blocks: [PageBlocksBlocksMutation]
}

input PageMutation {
  simple: PageSimpleMutation
  blocks: PageBlocksMutation
}

input NavigationFooterFooterMenuChildrenMutation {
  title: String
  page: String
}

input NavigationFooterFooterMenuMutation {
  title: String
  children: [NavigationFooterFooterMenuChildrenMutation]
}

input NavigationFooterMutation {
  footerMenu: [NavigationFooterFooterMenuMutation]
}

input NavigationMainNavMenuChildrenChildrenChildrenChildrenMutation {
  title: String
  page: String
}

input NavigationMainNavMenuChildrenChildrenChildrenMutation {
  title: String
  page: String
  children: [NavigationMainNavMenuChildrenChildrenChildrenChildrenMutation]
}

input NavigationMainNavMenuChildrenChildrenMutation {
  title: String
  page: String
  description: String
  disabled: Boolean
  showInMainNavigation: Boolean
  children: [NavigationMainNavMenuChildrenChildrenChildrenMutation]
}

input NavigationMainNavMenuChildrenMutation {
  title: String
  page: String
  disabled: Boolean
  showInMainNavigation: Boolean
  children: [NavigationMainNavMenuChildrenChildrenMutation]
}

input NavigationMainNavMenuMutation {
  title: String
  page: String
  disabled: Boolean
  showInMainNavigation: Boolean
  children: [NavigationMainNavMenuChildrenMutation]
}

input NavigationMainNavMutation {
  menu: [NavigationMainNavMenuMutation]
}

input NavigationMutation {
  footer: NavigationFooterMutation
  mainNav: NavigationMainNavMutation
}

schema {
  query: Query
  mutation: Mutation
}
